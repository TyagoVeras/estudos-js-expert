pre-push:
  parallel: false

  commands:
    check-branch:
      run: |
        set -e
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        PROTECTED_BRANCHES=("release" "master" "main" "uat" "develop")
        if [[ " ${PROTECTED_BRANCHES[@]} " =~ " ${current_branch} " ]]; then
          echo "Error: Push direto para a branch '${current_branch}' não é permitido. Use uma branch de feature/hotfix."
          exit 1
        fi
        echo "Branch '${current_branch}' validada com sucesso."

    ensure-clean-working-directory:
      run: |
        set -e
        if ! git diff --quiet || ! git diff --cached --quiet; then
          echo "Error: O diretório de trabalho contém mudanças não commitadas. Faça commit ou stash antes de prosseguir."
          exit 1
        fi
        echo "O diretório de trabalho está limpo."

    update-develop:
      run: |
        set -e
        if ! git rev-parse --verify develop >/dev/null 2>&1; then
          echo "A branch 'develop' não existe localmente. Criando a branch 'develop'..."
          git checkout -b develop
          git push --set-upstream origin develop
        else
          echo "Atualizando a branch 'develop'..."
          git pull origin develop --rebase || { echo "Error: Falha ao atualizar 'develop'."; exit 1; }
        fi

    rebase-current-branch:
      run: |
        set -e
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        if [ "$current_branch" != "develop" ]; then
          echo "Iniciando rebase da branch '${current_branch}' com 'develop'..."
          git rebase develop || { echo "Error: Conflitos durante o rebase."; exit 1; }
        fi

push-current-branch:
  run: |
    set -e
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    echo "Realizando push da branch '${current_branch}' com timeout de 120 segundos..."
    timeout 120 git push origin "$current_branch" || { echo "Error: O push falhou ou excedeu o tempo limite."; exit 1; }

pre-commit:
  parallel: false
  commands:
    tsc:
      tags: ci
      run: |
        echo "Executando verificação TypeScript..."
        if ! npx tsc --noEmit; then
          echo "Error: Erros de compilação encontrados pelo TypeScript. Corrija-os antes de continuar."
          exit 1
        fi
        echo "Nenhum erro TypeScript encontrado."

    eslint:
      tags: ci
      run: |
        echo "Executando verificação ESLint..."
        if ! npm run lint; then
          echo "Error: Erros de linting encontrados. Corrija-os antes de continuar."
          exit 1
        fi
        echo "Nenhum erro de linting encontrado."

    test:lefthook:
      tags: ci
      run: |
        echo "Executando testes..."
        if ! npm run test:lefthook; then
          echo "Error: Testes falharam. Verifique os erros e corrija antes de continuar."
          exit 1
        fi
        echo "Todos os testes passaram com sucesso.s"
